<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!-- Configures the Camel Context-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:amq="http://activemq.apache.org/schema/core"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xsi:schemaLocation="
       http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
       http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

  <import resource="classpath:META-INF/cxf/cxf.xml"/>

  <!-- Create an embedded ActiveMQ Broker -->
  <bean id="jmsConnectionFactory" 
    class="org.apache.activemq.ActiveMQConnectionFactory">
    <property name="brokerURL" value="tcp://localhost:61616" />
  </bean>

  <bean id="pooledConnectionFactory" 
    class="org.apache.activemq.pool.PooledConnectionFactory">
    <property name="maxConnections" value="8" />
    <property name="maximumActive" value="500" />
    <property name="connectionFactory" ref="jmsConnectionFactory" />
  </bean>

  <bean id="jmsConfig" 
    class="org.apache.camel.component.jms.JmsConfiguration">
    <property name="connectionFactory" ref="pooledConnectionFactory"/>
    <property name="transacted" value="false"/>
    <property name="concurrentConsumers" value="10"/>
  </bean>

  <!-- Create an embedded ActiveMQ broker -->
  <amq:broker id="broker" useJmx="true" persistent="false" brokerName="activemq" useShutdownHook="false">
    <amq:transportConnectors>
      <amq:transportConnector name="openwire" uri="tcp://localhost:61616" />
    </amq:transportConnectors>
  </amq:broker>


  <bean id="properties" class="org.apache.camel.component.properties.PropertiesComponent">
    <property name="location" value="classpath:memories-prod.properties"/>
  </bean>

  <bean id="speechBubble" class="com.apachecon.memories.speechbubble.SpeechBubble" />
  <bean id="imageHandler" class="com.apachecon.memories.hippocampus.ImageHandler" />
  <bean id="twitterSearch" class="com.apachecon.memories.twitter.TwitterSearch" />
  <bean id="defaultAggregator" class="com.apachecon.memories.twitter.TwitterSearch" factory-method="defaultAggregation" />


  <bean class="com.apachecon.memories.cxf.UploadService" id="imageServiceBean">
    <constructor-arg value="/x1/apachecon/memories"/>
  </bean>
  <jaxrs:server id="jaxrsService" address="/memories">
    <jaxrs:serviceBeans>
      <ref bean="imageServiceBean" />
    </jaxrs:serviceBeans>                  
  </jaxrs:server>
  <jaxws:endpoint address="/soap-memories" implementor="#imageServiceBean"/>

  <camelContext trace="true" xmlns="http://camel.apache.org/schema/spring">
    <package>com.apachecon.memories</package>

    <!-- Use json (via jackson library) to unmarshal twitter search results -->
    <dataFormats>
      <!-- json data format for Twitter searches -->
      <json id="twitter" library="Jackson" unmarshalTypeName="com.apachecon.memories.twitter.Search"/>
    </dataFormats>

    <!-- On scheduled times a twitter search is triggered and the search url is built
         based on the max_id of the last result stored in the twitter.max_id file. 
         The actual search is performed by the route below -->
    <route id="twitter-search" autoStartup="false">
      <from uri="{{schedule.fetch-tweets}}" />
      <pollEnrich uri="file:{{memories.home}}?fileName=twitter.max_id"/>
      <choice>
        <when>
          <simple>${body} == null</simple>
          <setBody><constant>0</constant></setBody>
        </when>
      </choice>
      <setBody><simple>?q=apachecon&amp;since_id=${body}</simple></setBody>
      <to uri="seda:tweet-search" />
    </route>

    <!-- Searches for twitter posts using a hardcoded query (#apachecon)
         one page a a time. Requests are posted in a seda queue, if the
         results indicate that there are other pages to fetch, a new 
         request is pushed to the queue -->
    <route id="twitter-get-page">
      <from uri="seda:tweet-search" />
      <setHeader headerName="TwitterSearch"><simple>http://search.twitter.com/search.json${body}</simple></setHeader>
      <to uri="log:tweet-search" />
      <routingSlip><header>TwitterSearch</header></routingSlip>
      <unmarshal ref="twitter" />
      <setHeader headerName="NextPage"><simple>${body.next_page}</simple></setHeader>
      <setHeader headerName="MaxId"><simple>${body.max_id_str}</simple></setHeader>
      <throttle timePeriodMillis="1000"><constant>5</constant>
        <split>
          <method bean="twitterSearch" method="tweets" />
          <to uri="jms:memories.tweets" />
        </split>
        <choice>
          <when>
            <simple>${header.NextPage} contains '?page'</simple>
            <setBody><simple>${body.next_page}</simple></setBody>
            <to uri="seda:tweet-search" />
          </when>
          <otherwise>
            <setBody><simple>${body.max_id_str}</simple></setBody>
            <setHeader headerName="CamelFileName"><constant>twitter.max_id</constant></setHeader>
            <to uri="file:{{memories.home}}" />
          </otherwise>
        </choice>
      </throttle>
    </route>

    <!-- Search requests are split in individual tweets and posted to the jms queue
         to be processed asynchronously/offline. -->
    <route id="twitter-process-tweet">
      <from uri="jms:memories.tweets" />
      <setHeader headerName="CamelFileName"><simple>${body.id_str}</simple></setHeader>
      <setHeader headerName="CamelFileParent"><constant>/x1/apachecon/memories/upload</constant></setHeader>
      <setBody><simple>${body.text}</simple></setBody>
      <to uri="direct:bubble" />
    </route>

    <!-- Autonomous service (implemented as a Camel route that generates a speech bubble for a tweet. -->
    <route id="tweet-bubble">
      <from uri="direct:bubble" />
      <bean ref="speechBubble" method="generateBubbleImage" />
      <setHeader headerName="Content-Type">
        <constant>image/jpg</constant>
      </setHeader>
      <bean ref="imageHandler" method="writeImage" />
    </route>

    <!-- Mock service to be used instead of the bubble generation above. 
         Used for testing to avoid generating a bunch of jpg files. -->
    <route id="tweet-ignore">
      <!-- Test route that mocks out bubble jpg generation -->
      <from uri="direct:ignore" />
      <to uri="log:IGNORE" />
    </route>

    <!-- Generate thumbnails for uploaded images. -->
    <route id="generate-thumbs">
      <from uri="file:{{memories.home}}/memories/archive?noop=true" />
      <bean ref="imageHandler" method="generateThumbnail" />
    </route>

    <!-- Mosaic generation service, implemented to execute a script 
        (and ultimately invoke pymos, the library we use for this purpose)
        at scheduled times. -->
    <route id="generate-mosaic" autoStartup="false">
      <from uri="{{schedule.generate}}" />
      <setHeader headerName="CamelExecCommandArgs"><constant>feather</constant></setHeader>
      <to uri="exec:{{script.generate}}" />
    </route>
      
  </camelContext>

</beans>
